// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// g
arma::vec g(const arma::vec& x);
RcppExport SEXP _TobitTest_g(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(g(x));
    return rcpp_result_gen;
END_RCPP
}
// h
arma::vec h(const arma::vec& x);
RcppExport SEXP _TobitTest_h(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(h(x));
    return rcpp_result_gen;
END_RCPP
}
// elln
double elln(const arma::vec& y1, const arma::vec& r0, const arma::vec& r1, const double& gamma, const double& left);
RcppExport SEXP _TobitTest_elln(SEXP y1SEXP, SEXP r0SEXP, SEXP r1SEXP, SEXP gammaSEXP, SEXP leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r0(r0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type left(leftSEXP);
    rcpp_result_gen = Rcpp::wrap(elln(y1, r0, r1, gamma, left));
    return rcpp_result_gen;
END_RCPP
}
// elln_prime
double elln_prime(const arma::vec& x0j, const arma::vec& x1j, const arma::vec& y1, const arma::vec& r0, const arma::vec& r1, const double& gamma, const double& left);
RcppExport SEXP _TobitTest_elln_prime(SEXP x0jSEXP, SEXP x1jSEXP, SEXP y1SEXP, SEXP r0SEXP, SEXP r1SEXP, SEXP gammaSEXP, SEXP leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x0j(x0jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x1j(x1jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r0(r0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type left(leftSEXP);
    rcpp_result_gen = Rcpp::wrap(elln_prime(x0j, x1j, y1, r0, r1, gamma, left));
    return rcpp_result_gen;
END_RCPP
}
// tobitADMM_C
Rcpp::List tobitADMM_C(const arma::mat& x, const arma::colvec& yin, const double& left, const arma::mat& Cin, arma::uvec& M, arma::uvec& Mc, const arma::colvec& tin, const double& a, const double& lambda, const double& rho, const arma::vec& delta_init, const double& gamma_init, const arma::vec& eta_init, const arma::vec& nu1_init, const arma::vec& nu2_init, const double& abs_tol, const double& rel_tol, const double& nr_tol, const double& theta_tol, const bool& full_model, const int& maxit);
RcppExport SEXP _TobitTest_tobitADMM_C(SEXP xSEXP, SEXP yinSEXP, SEXP leftSEXP, SEXP CinSEXP, SEXP MSEXP, SEXP McSEXP, SEXP tinSEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP delta_initSEXP, SEXP gamma_initSEXP, SEXP eta_initSEXP, SEXP nu1_initSEXP, SEXP nu2_initSEXP, SEXP abs_tolSEXP, SEXP rel_tolSEXP, SEXP nr_tolSEXP, SEXP theta_tolSEXP, SEXP full_modelSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< const double& >::type left(leftSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cin(CinSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Mc(McSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type tin(tinSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta_init(delta_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_init(gamma_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_init(eta_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu1_init(nu1_initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu2_init(nu2_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type abs_tol(abs_tolSEXP);
    Rcpp::traits::input_parameter< const double& >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< const double& >::type nr_tol(nr_tolSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_tol(theta_tolSEXP);
    Rcpp::traits::input_parameter< const bool& >::type full_model(full_modelSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(tobitADMM_C(x, yin, left, Cin, M, Mc, tin, a, lambda, rho, delta_init, gamma_init, eta_init, nu1_init, nu2_init, abs_tol, rel_tol, nr_tol, theta_tol, full_model, maxit));
    return rcpp_result_gen;
END_RCPP
}
// LprimeC
NumericVector LprimeC(NumericVector xj, NumericVector y, LogicalVector d, NumericVector r, double gamma);
RcppExport SEXP _TobitTest_LprimeC(SEXP xjSEXP, SEXP ySEXP, SEXP dSEXP, SEXP rSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xj(xjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(LprimeC(xj, y, d, r, gamma));
    return rcpp_result_gen;
END_RCPP
}
// logL1
NumericVector logL1(NumericVector y, LogicalVector d, NumericVector r, double gamma);
RcppExport SEXP _TobitTest_logL1(SEXP ySEXP, SEXP dSEXP, SEXP rSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(logL1(y, d, r, gamma));
    return rcpp_result_gen;
END_RCPP
}
// tobitnet_innerC
List tobitnet_innerC(NumericMatrix xin, NumericVector yin, NumericVector cin, double lambda1, double lambda2, NumericVector pf1, NumericVector pf2, NumericVector delta_init, double delta_0_init, double gamma_init, double eps, bool standardize, double maxit);
RcppExport SEXP _TobitTest_tobitnet_innerC(SEXP xinSEXP, SEXP yinSEXP, SEXP cinSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP pf1SEXP, SEXP pf2SEXP, SEXP delta_initSEXP, SEXP delta_0_initSEXP, SEXP gamma_initSEXP, SEXP epsSEXP, SEXP standardizeSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type xin(xinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yin(yinSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cin(cinSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pf1(pf1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pf2(pf2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type delta_init(delta_initSEXP);
    Rcpp::traits::input_parameter< double >::type delta_0_init(delta_0_initSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_init(gamma_initSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(tobitnet_innerC(xin, yin, cin, lambda1, lambda2, pf1, pf2, delta_init, delta_0_init, gamma_init, eps, standardize, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TobitTest_g", (DL_FUNC) &_TobitTest_g, 1},
    {"_TobitTest_h", (DL_FUNC) &_TobitTest_h, 1},
    {"_TobitTest_elln", (DL_FUNC) &_TobitTest_elln, 5},
    {"_TobitTest_elln_prime", (DL_FUNC) &_TobitTest_elln_prime, 7},
    {"_TobitTest_tobitADMM_C", (DL_FUNC) &_TobitTest_tobitADMM_C, 21},
    {"_TobitTest_LprimeC", (DL_FUNC) &_TobitTest_LprimeC, 5},
    {"_TobitTest_logL1", (DL_FUNC) &_TobitTest_logL1, 4},
    {"_TobitTest_tobitnet_innerC", (DL_FUNC) &_TobitTest_tobitnet_innerC, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_TobitTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
